From 6a53d36f4c7b1ffa3972b3322e2be9e8d473924b Mon Sep 17 00:00:00 2001
From: bot <buildbot@buildhost>
Date: Sun, 29 Dec 2024 10:11:49 +0800
Subject: [PATCH] /proc/pid/maps: dont allow paths with lineage to be listed
 https://github.com/backslashxx/mojito_krenol/commit/15da6a638cb9b895bcdf8739e666e89add65df8c

https://github.com/backslashxx/mojito_krenol/commit/765ab67079684ef8d57be4197e8eb5fe8c60e6cd

https://github.com/backslashxx/mojito_krenol/commit/291a941715601dce40379b6fef724b184b0e982b
---
 fs/proc/base.c     | 16 +++++++++++-----
 fs/proc/task_mmu.c | 28 ++++++++++++++++++++++++++++
 2 files changed, 39 insertions(+), 5 deletions(-)

diff --git a/fs/proc/base.c b/fs/proc/base.c
index 6a85aa103..a1ef18fef 100644
--- a/fs/proc/base.c
+++ b/fs/proc/base.c
@@ -2287,11 +2287,17 @@ static int map_files_get_link(struct dentry *dentry, struct path *path)
 
 	rc = -ENOENT;
 	vma = find_exact_vma(mm, vm_start, vm_end);
-	if (vma && vma->vm_file) {
-		*path = vma->vm_file->f_path;
-		path_get(path);
-		rc = 0;
-	}
+	if (vma) {
+			if (vma->vm_file) {
+					if (strstr(vma->vm_file->f_path.dentry->d_name.name, "lineage")) { 
+					rc = kern_path("/system/framework/framework-res.apk", LOOKUP_FOLLOW, path);
+			} else {
+			*path = vma->vm_file->f_path;
+			path_get(path);
+					rc = 0;
+					}
+			}
+		}
 	mmap_read_unlock(mm);
 
 out_mmput:
diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c
index c6f982504..f8be03af6 100644
--- a/fs/proc/task_mmu.c
+++ b/fs/proc/task_mmu.c
@@ -273,6 +273,23 @@ static void show_vma_header_prefix(struct seq_file *m,
 	seq_putc(m, ' ');
 }
 
+static void show_vma_header_prefix_fake(struct seq_file *m,
+				   unsigned long start, unsigned long end,
+				   vm_flags_t flags, unsigned long long pgoff,
+				   dev_t dev, unsigned long ino)
+{
+	seq_setwidth(m, 25 + sizeof(void *) * 6 - 1);
+	seq_printf(m, "%08lx-%08lx %c%c%c%c %08llx %02x:%02x %lu ",
+		   start,
+		   end,
+		   flags & VM_READ ? 'r' : '-',
+		   flags & VM_WRITE ? '-' : '-',
+		   flags & VM_EXEC ? '-' : '-',
+		   flags & VM_MAYSHARE ? 's' : 'p',
+		   pgoff,
+		   MAJOR(dev), MINOR(dev), ino);
+}
+
 static void
 show_map_vma(struct seq_file *m, struct vm_area_struct *vma)
 {
@@ -290,6 +307,17 @@ show_map_vma(struct seq_file *m, struct vm_area_struct *vma)
 		dev = inode->i_sb->s_dev;
 		ino = inode->i_ino;
 		pgoff = ((loff_t)vma->vm_pgoff) << PAGE_SHIFT;
+		struct dentry *dentry = file->f_path.dentry;
+		if (dentry) {
+			const char *path = (const char *)dentry->d_name.name; 
+			if (strstr(path, "lineage")) { 
+				start = vma->vm_start;
+				end = vma->vm_end;
+				show_vma_header_prefix_fake(m, start, end, flags, pgoff, dev, ino);
+				name = "/system/framework/framework-res.apk";
+				goto done;
+			}
+		}
 	}
 
 	start = vma->vm_start;
-- 
2.47.1

